use strict;my $file = $ARGV[0];my $dictionary = $ARGV[1];my $stringIndex = $ARGV[2]; # 26open(IN,"<".$file) or die "Error openning $file $!\n";my @tuples = <IN>;close(IN);open(DIC,"<".$dictionary) or die "Error openning $dictionary $!\n";my @DIC = <DIC>;close(DIC);my @auxToOrder = ();open(OUT,">".$file."_converted.arff") or die "Error creating new $file ARFF $!\n";my $in=0;my $countAttribute = 0;my $flagAttrib = 0;foreach(@tuples){		if ($in == 1)	{		my $tuple = $_;		my @partes = split(/,/,$tuple);				#attributes untouched		my $indexAttributes = 0;		print OUT "{";		for(my $i=0; $i<$stringIndex; $i++)		{			print OUT $indexAttributes." ".$partes[$i].",";			$indexAttributes++;		}		#attributes to convert		@auxToOrder = ();		for(my $i=$stringIndex; $i<$#partes; $i++)		{			my $indexWord = searchWord($partes[$i]);			if ($indexWord >= 0)			{				addSet(($indexWord+$stringIndex));			}		}		@auxToOrder = sort { $a <=> $b }  @auxToOrder;		foreach(@auxToOrder)		{			print OUT $_." 1,";		}		#class		print OUT ($indexAttributes+$#DIC+1)." ".trim($partes[$#partes])."}\n";	}	if ($_ =~ /\@DATA/i)	{		$in = 1;		print OUT $_;	}	elsif ($_ =~ /\@ATTRIBUTE class /i)	{		print OUT $_;	}	elsif ($_ =~ /\@attribute/i)	{		if ($countAttribute < $stringIndex)		{			print OUT $_;		}		else		{			if ($flagAttrib == 0)			{				addAttributeTags();				$flagAttrib = 1;			}		}		$countAttribute++;	}	elsif ($in == 0)	{		print OUT $_;	}}sub addSet{	my $value = shift;	my $present = 0;	foreach(@auxToOrder)	{		if ($value eq $_)		{			$present = 1;			last;		}	}		if ($present == 0)	{		push(@auxToOrder,$value);	}}sub searchWord{	my $word = shift;	$word = lc(trim($word));	$word =~ s/\s+/_/gi;		for(my $index=0; $index<=$#DIC; $index++)	{		if ($word eq trim($DIC[$index]))		{			return $index;		}	}	return -1;}sub addAttributeTags{	foreach(@DIC)	{		print OUT "\@ATTRIBUTE ".trim($_)." numeric\n";	}}sub generalizeWord{	my $word = shift;		if ($word =~ /^\d+$/gi)	{		return "digit";	}	elsif ($word =~ /\d/gi)	{		return "containNumber";	}	elsif ($word =~ /\.|\,|\:|\;|\!|\?/gi)	{		return "punct";	}	elsif ($word =~ /\@|\#|\$|\%|\^|\&|\*|\(|\)|\[|\]|\{|\}|\<|\>|\"|\'|\`|\||\\|\/|\-|\=|\+|\~/gi)	{		return "symb";	}	return $word;}sub trim($){	my $string = shift;	$string =~ s/^\s+//;	$string =~ s/\s+$//;	return $string;}