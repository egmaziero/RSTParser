use strict;my $pair = $ARGV[0];##################################################### Estrutura que armazena cada padrão####################################################my $rel;my $order;my $id;my @text_m1;my @list_m1;my @tag_m1;my @opt_m1;my $pos1;my @text_m2;my @list_m2;my @tag_m2;my @opt_m2;my $pos2;my @itens_m1; #com ordem dos itens do marcador 1my @itens_m2; #com ordem dos itens do marcador 2##################################################### Carregamento de Listas com nomes dos arquivos de padrões e listas de palavras####################################################my $diretorio;my @patterns;	opendir($diretorio, "REP/patterns") or die "Nao pode abrir o diretorio de padroes\n";	@patterns = grep {!(/^\./) and /$\.xml/} readdir($diretorio);	closedir($diretorio);my @lists;	opendir($diretorio, "REP/lists") or die "Nao pode abrir o diretorio listas\n";	@lists = grep {!(/^\./)} readdir($diretorio);	closedir($diretorio);##################################################### Varre a lista de arquivos de padroes e para cada arquivo, seus padroes####################################################my @pattern_lines;my @aux;foreach (@patterns){	open(FILE, "<REP/patterns/".$_) or die "Nao pode abrir o arquivo de padroes";	@pattern_lines = <FILE>;	close(FILE);		my $indice = 0;		while($indice <= $#pattern_lines)	{		if ($pattern_lines[$indice] =~ /<rel>/)		{			@aux = split(/>/, $pattern_lines[$indice]);			@aux = split(/</,$aux[1]);			$rel = $aux[0];		}		elsif ($pattern_lines[$indice] =~ /<order>/)		{			@aux = split(/>/, $pattern_lines[$indice]);			@aux = split(/</,$aux[1]);			$order = $aux[0];		}		elsif ($pattern_lines[$indice] =~ /<id>/)		{			@aux = split(/>/, $pattern_lines[$indice]);			@aux = split(/</,$aux[1]);			$id = $aux[0];		}		elsif ($pattern_lines[$indice] =~ /<pos_marcador1>/)		{			@aux = split(/>/, $pattern_lines[$indice]);			@aux = split(/</,$aux[1]);			$pos1 = $aux[0];		}		elsif ($pattern_lines[$indice] =~ /\<pos_marcador2\>/)		{			@aux = split(/>/, $pattern_lines[$indice]);			@aux = split(/</,$aux[1]);			$pos2 = $aux[0];		}		elsif ($pattern_lines[$indice] =~ /<marcador1>/)		{			$indice++;			#enquanto estiver dentro do elemento marcador			while (!($pattern_lines[$indice] =~ /<\/marcador1>/))			{				if ($pattern_lines[$indice] =~ /<text>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@text_m1,$aux[0]);					push(@itens_m1,"t");				}				elsif ($pattern_lines[$indice] =~ /<listname>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@list_m1,$aux[0]);					push(@itens_m1,"l");				}				elsif ($pattern_lines[$indice] =~ /<postag>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@tag_m1,$aux[0]);					push(@itens_m1,"p");				}				elsif ($pattern_lines[$indice] =~ /<optional>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@opt_m1,$aux[0]);					push(@itens_m1,"o");				}				$indice++;			}		}		elsif ($pattern_lines[$indice] =~ /<marcador2>/)		{			$indice++;			#enquanto estiver dentro do elemento marcador			while (!($pattern_lines[$indice] =~ /<\/marcador2>/))			{				if ($pattern_lines[$indice] =~ /<text>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@text_m2,$aux[0]);					push(@itens_m2,"t");				}				elsif ($pattern_lines[$indice] =~ /<listname>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@list_m2,$aux[0]);					push(@itens_m2,"l");				}				elsif ($pattern_lines[$indice] =~ /<postag>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@tag_m2,$aux[0]);					push(@itens_m2,"p");				}				elsif ($pattern_lines[$indice] =~ /<optional>/)				{					@aux = split(/>/, $pattern_lines[$indice]);					@aux = split(/</,$aux[1]);					$aux[0] = trim($aux[0]);					push(@opt_m2,$aux[0]);					push(@itens_m2,"o");				}				$indice++;			}		}		my $varER_t = "[^\\(]+"; 		my $varER_c = "[^\\)]+"; 		my $varER_tag = "[^ ]+ "; 		if ($pattern_lines[$indice] =~ /<\/padrao>/)		{			#############################			#montagem da ER para marcador 1			#############################			my @ER1 = ();			my $e1 = 0;			my $t = 0;			my $l = 0;			my $p = 0;			my $o = 0;			my $arq_list;			my @words;			my @words_text;			my $i;			foreach(@itens_m1)			{				if ($_ eq "o") #palavra opcional				{					for($i = 0; $i<=$e1; $i++)					{						$ER1[($e1+1)+$i] = $ER1[$i];						$ER1[$i] = $ER1[$i].$opt_m1[$o]."\\(".$varER_c."\\)_".$varER_tag;					}					$o++;					$e1 +=$i;				}				elsif ($_ eq "t") #texto				{					@words_text = split(/\s+/,$text_m1[$t]);					foreach(@words_text)					{						for($i = 0; $i<=$e1; $i++)						{							###################################							# Caso especial onde tem-se palavra1*palavra2							###################################							if (trim($_) =~ /\*/)							{								my @w = split(/\*/,$_);								foreach(my $j=0; $j<$#w; $j++)								{									if (trim($w[$j]) =~ /_lem/)									{										my $can = $w[$j];										$can =~ s/_lem//;										$ER1[$i] = $ER1[$i].$varER_t."\\(".$can."\\)_".$varER_tag.".* ";									}									else									{										if ((trim($w[$j]) eq '""') or (trim($w[$j]) eq ""))										{											$w[$j] = ".*";										}										$ER1[$i] = $ER1[$i].$w[$j]."\\(".$varER_c."\\)_".$varER_tag.".* ";									}								}								if (trim($w[$#w]) =~ /_lem/)								{									my $can = $w[$#w];									$can =~ s/_lem//;									$ER1[$i] = $ER1[$i].$varER_t."\\(".$can."\\)_".$varER_tag;								}								else								{									if ((trim($w[$#w]) eq '""') or (trim($w[$#w]) eq ""))									{										$w[$#w] = ".*";									}									$ER1[$i] = $ER1[$i].$w[$#w]."\\(".$varER_c."\\)_".$varER_tag;								}							}							##############							elsif (trim($_) =~ /_lem/)							{								my $can = $_;								$can =~ s/_lem//;								$ER1[$i] = $ER1[$i].$varER_t."\\(".$can."\\)_".$varER_tag;							}							else							{								if ((trim($_) eq '""') or (trim($_) eq ""))								{									$_ = ".*";								}								$ER1[$i] = $ER1[$i].$_."\\(".$varER_c."\\)_".$varER_tag;							}						}					}					$t++				}				elsif ($_ eq "l") #lista de palavras				{					###############################################					# Abre lista de arquivo e jogas as palavras em @list					###############################################					open($arq_list,"<REP/lists/DiZer_".$list_m1[$l].".xml") or die "Nao pode abrir arquivo de lista de palavras DiZer_".$list_m1[$l].".xml";					@words = <$arq_list>;					close($arq_list);					my @list = ();					foreach(@words)					{						if ($_ =~ /<item>/)						{							@aux = split(/>/, $_);							@aux = split(/</,$aux[1]);							$aux[0] = trim($aux[0]);							push (@list, $aux[0])						}					}					###############################################					# Copia as palavras para o vetor de ERs					###############################################					my $aux_count = 0;					my $j;					my @ER1_aux = ();					for($j = 0; $j <= $#list; $j++)					{						for($i = 0; $i<=$e1; $i++)						{							$ER1_aux[$aux_count] = $ER1[$i].$list[$j]."\\(".$varER_c."\\)_".$varER_tag;							$aux_count++;						}					}					$e1 = $aux_count-1;					@ER1 = @ER1_aux;					$l++				}				elsif ($_ eq "p") #postag				{					for($i = 0; $i<=$e1; $i++)					{						$ER1[$i] = $ER1[$i].$varER_t."\\(".$varER_c."\\)".$tag_m1[$p]." ";					}					$p++				}			}			#############################			#limpando os vetores para proximo padrao			#############################			@text_m1 = ();			@list_m1 = ();			@tag_m1 = ();			@itens_m1 = ();						#############################			#montagem da ER para marcador 2			#############################			my @ER2 = ();			my $e2 = 0;			my $t = 0;			my $l = 0;			my $p = 0;			my $o = 0;			my $arq_list;			my @words;			my @words_text;			my $i;			foreach(@itens_m2)			{				if ($_ eq "o") #palavra opcional				{					for($i = 0; $i<=$e2; $i++)					{						$ER2[($e2+1)+$i] = $ER2[$i];						$ER2[$i] = $ER2[$i].$opt_m2[$o]."\\(".$varER_c."\\)_".$varER_tag;					}					$o++;					$e2 +=$i;				}				elsif ($_ eq "t") #texto				{					@words_text = split(/\s+/,$text_m2[$t]);					foreach(@words_text)					{						for($i = 0; $i<=$e2; $i++)						{							###################################							# Caso especial onde tem-se palavra1*palavra2							###################################							if (trim($_) =~ /\*/)							{								my @w = split(/\*/,$_);								foreach(my $j=0; $j<$#w; $j++)								{									if (trim($w[$j]) =~ /_lem/)									{										my $can = $w[$j];										$can =~ s/_lem//;										$ER2[$i] = $ER2[$i].$varER_t."\\(".$can."\\)_".$varER_tag.".* ";									}									else									{										if ((trim($w[$j]) eq '""') or (trim($w[$j]) eq ""))										{											$w[$j] = ".*";										}										$ER2[$i] = $ER2[$i].$w[$j]."\\(".$varER_c."\\)_".$varER_tag.".* ";									}								}								if (trim($w[$#w]) =~ /_lem/)								{									my $can = $w[$#w];									$can =~ s/_lem//;									$ER2[$i] = $ER2[$i].$varER_t."\\(".$can."\\)_".$varER_tag;								}								else								{									if ((trim($w[$#w]) eq '""') or (trim($w[$#w]) eq ""))									{										$w[$#w] = ".*";									}									$ER2[$i] = $ER2[$i].$w[$#w]."\\(".$varER_c."\\)_".$varER_tag;								}							}							##############							elsif (trim($_) =~ /_lem/)							{								my $can = $_;								$can =~ s/_lem//;								$ER2[$i] = $ER2[$i].$varER_t."\\(".$can."\\)_".$varER_tag;							}							else							{								if ((trim($_) eq '""') or (trim($_) eq ""))								{									$_ = ".*";								}								$ER2[$i] = $ER2[$i].$_."\\(".$varER_c."\\)_".$varER_tag;							}						}					}					$t++				}				elsif ($_ eq "l") #lista de palavras				{					###############################################					# Abre lista de arquivo e jogas as palavras em @list					###############################################					open($arq_list,"<REP/lists/DiZer_".$list_m2[$l].".xml") or die "Nao pode abrir arquivo de lista de palavras ".$list_m2[$l].".xml";					@words = <$arq_list>;					close($arq_list);					my @list = ();					foreach(@words)					{						if ($_ =~ /<item>/)						{							@aux = split(/>/, $_);							@aux = split(/</,$aux[1]);							$aux[0] = trim($aux[0]);							push (@list, $aux[0])						}					}					###############################################					# Copia as palavras para o vetor de ERs					###############################################					my $aux_count = 0;					my $j;					my @ER2_aux = ();					for($j = 0; $j <= $#list; $j++)					{						for($i = 0; $i<=$e2; $i++)						{							$ER2_aux[$aux_count] = $ER2[$i].$list[$j]."\\(".$varER_c."\\)_".$varER_tag;							$aux_count++;						}					}					$e2 = $aux_count-1;					@ER2 = @ER2_aux;					$l++				}				elsif ($_ eq "p") #postag				{					for($i = 0; $i<=$e2; $i++)					{						$ER2[$i] = $ER2[$i].$varER_t."\\(".$varER_c."\\)".$tag_m2[$p]." ";					}					$p++				}			}			#############################			#limpando os vetores para proximo padrao			#############################			@text_m2 = ();			@list_m2 = ();			@tag_m2 = ();			@itens_m2 = ();									########################################################			# Position of the markers			########################################################						for(my $i=0; $i<=$e1; $i++)			{				if ($pos1 eq "Beginning")				{					$ER1[$i] = "^".$ER1[$i];				}				elsif ($pos1 eq "End")				{					$ER1[$i] = trim($ER1[$i])."\$";				}			}			for(my $i=0; $i<=$e2; $i++)			{				if ($pos2 eq "Beginning")				{					$ER2[$i] = "^".$ER2[$i];									}				elsif ($pos2 eq "End")				{					$ER2[$i] = trim($ER2[$i])."\$";				}			}						########################################################			# Relacao entre os segmentos			########################################################			my @partes = split(/\*\*\*/,$pair);			my $segment1 = $partes[0];			my $segment2 = trim($partes[1]);			my $m1 = 0;			my $m2 = 0;			my $i1 = 0;			my $i2 = 0;			my $pattern1 = "";			my $pattern2 = "";			for(my $i=0; $i<=$e1; $i++)			{				my $aux_segment = trim($segment1);				if (($aux_segment =~ m/$ER1[$i]/gi) or ($ER1[$i] eq ""))				{					$m1 = 1;					$i1 = $i;					$pattern1 = $ER1[$i];				}			}			for($i=0; $i<=$e2; $i++)			{				my $aux_segment = trim($segment2);				if (($aux_segment =~ m/$ER2[$i]/gi) or ($ER2[$i] eq ""))				{					$m2 = 1;					$i2 = $i;					$pattern2 = $ER2[$i];				}			}						if (($m1 == 1) and ($m2 == 1))			{					#print "------------------------------------------------------------\n				#$order | Marker 1: $pattern1 | Marker 2: $pattern2\n";				#print "Pattern | $rel\n1: ".trim($segment1)."\n2: ".trim($segment2)."\n";				print $rel."\n";			}	   	}	   $indice++;	}   }			sub trim{ my $string = shift; $string =~ s/^\s+//; $string =~ s/\s+$//; return $string;}