use strict;my $iteration = $ARGV[0];my $threshold = 0.5;my $stringIndex = 38;my $numberAttributes = 52;my $classifierCommand = "weka.jar weka.classifiers.trees.J48";#my $classifierCommand = 'weka.jar weka.classifiers.functions.SMO -C 1.0 -L 0.001 -P 1.0E-12 -N 0 -V -1 -W 1 -K "weka.classifiers.functions.supportVector.PolyKernel -C 250007 -E 1.0"';print "Incrementing model...\n";my @incrementPattern;open(FILE,"<classifications/relationsFound_".$iteration.".txt") or print "Error: cant open relationsFound.txt $!\n";my @lines = <FILE>;close(FILE);my @features;foreach(@lines){	my $relation;	my $confidence;	my $feature;	my $module;	if ($_ =~ /^\d+\s+\|\s+\d+/)	{		#print $_;		my @partes = split(/\|/,$_);		$relation = trim($partes[2]);		$confidence= trim($partes[3]);		$module = trim($partes[4]);		$feature = trim($partes[5]);				if (($confidence >= $threshold) and ($module ne "Rule"))		{			$feature =~ s/\?$/$relation/;			push(@features,$feature);		}	}}#remove repeated occurrenciesmy %seen;@features = grep !$seen{$_}++, @features;#keep previous modelsystem("cp models/data/featuresRelation.arff models/data/previous/featuresRelation".($iteration-1).".arff");system("cp models/data/featuresRelation.arff_converted.arff models/data/previous/featuresRelation".($iteration-1).".arff_converted.arff");system("cp models/RelationsModel.model models/data/previous/RelationsModel".($iteration-1).".model");system("cp models/dictionaryRelations.dic models/data/previous/dictionaryRelations".($iteration-1).".dic");#add new instancesopen(ARFF,"<models/data/featuresRelation.arff") or die "Error: can't open previous arff $!\n";my @featureVector = <ARFF>;close(ARFF);foreach(@features){	my $f = trim($_);	my @partes = split(/\,/,$f);	$f =~ s/"/quotation/gi;	$f =~ s/'/apostr/gi;	$f =~ s/%/percentage/gi;	$f =~ s/\,\,\,/\,comma\,/ig;		if (($f !~ /,,/) and ($f !~ /Error attributes/) and ($#partes >= $numberAttributes))	{		print "ADD: ".trim($f)."\n";		push(@featureVector,$f);	}}open(ARFF,">models/data/featuresRelation.arff") or die "Error: can't create new arff $!\n";foreach(@featureVector){	print ARFF trim($_)."\n";}close(ARFF);#update dictionaryprint "Creating new dictionary...\n";system("perl createDictionaryRelations.pl models/data/featuresRelation.arff evaluations/testSet.arff ".$stringIndex." ".$iteration);system("cp models/dictionaryRelations".$iteration.".dic models/dictionaryRelations.dic");print "Converting String to WordVector..\n";system("perl convertStringToWordVectorRelation.pl models/data/featuresRelation.arff models/dictionaryRelations".$iteration.".dic ".$stringIndex);system("perl convertStringToWordVectorRelation.pl evaluations/testSet.arff models/dictionaryRelations".$iteration.".dic ".$stringIndex);#create a new modelprint "Training new model...\n";system("java -classpath weka-3-6-11/".$classifierCommand." -t models/data/featuresRelation.arff_converted.arff -T evaluations/testSet.arff_converted.arff -d models/RelationsModel.model -i > evaluations/results".$iteration.".tmp");sub trim($){ my $string = shift; $string =~ s/^\s+//; $string =~ s/\s+$//; return $string;}